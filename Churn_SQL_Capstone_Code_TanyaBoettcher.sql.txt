-- General pull of table
SELECT *
FROM subscriptions
LIMIT 10;



-- Start and end dates of the table
SELECT MIN(subscription_start),
	MAX(subscription_start)
FROM subscriptions;



-- Number of subscribers on launch date
SELECT COUNT(*) as launch_date_subscribers
FROM subscriptions
WHERE subscription_start = '2016-12-01';



-- Number of new subscribers
SELECT COUNT(*) as new_subscribers
FROM subscriptions
WHERE subscription_start BETWEEN '2016-12-01' AND '2017-03-31';



-- Number of subscribers who cancelled
SELECT COUNT(*) as cancellations
FROM subscriptions
WHERE subscription_end BETWEEN '2016-12-01' AND '2017-03-31';



-- Number of current subscribers
SELECT COUNT(*) as current_subscribers
FROM subscriptions
WHERE subscription_end IS NULL;



-- Churn rate as a company whole
WITH months AS 
	(SELECT 
   	'2017-01-01' AS first_day,
  	'2017-01-31' AS last_day
	UNION
	SELECT
  	'2017-02-01' AS first_day,
  	'2017-02-28' AS last_day
	UNION
	SELECT
  	'2017-03-01' AS first_day,
  	'2017-03-31' AS last_day
	),
cross_join AS
	(SELECT *
	FROM subscriptions
	CROSS JOIN months
	),
status AS
	(SELECT id,
	first_day AS month,
	segment,
	CASE
  		WHEN (subscription_start < first_day)
   		AND (subscription_end >first_day
        	OR subscription_end IS NULL
        	) THEN 1
   		ELSE 0
   		END as is_active,
  	CASE
    		WHEN (subscription_end BETWEEN first_day AND last_day) THEN 1
    		ELSE 0
    		END AS is_canceled
	FROM cross_join
	),
status_aggregate AS (
	SELECT month,
  	segment,
  	SUM(is_active) AS sum_active, 
	SUM(is_canceled) AS sum_canceled
	FROM status 
	GROUP BY month
	) 
SELECT month,
	1.0 * sum_canceled/sum_active AS churn_rate
FROM status_aggregate;



-- Churn rate by segment with segment hard coded

WITH months AS 
	(SELECT 
   	'2017-01-01' AS first_day,
  	'2017-01-31' AS last_day
	UNION
	SELECT
  	'2017-02-01' AS first_day,
  	'2017-02-28' AS last_day
	UNION
	SELECT
  	'2017-03-01' AS first_day,
  	'2017-03-31' AS last_day
	),
cross_join AS
	(SELECT *
	FROM subscriptions
	CROSS JOIN months
	),
status AS
	(SELECT id,
	first_day AS month,
	CASE
  		WHEN (subscription_start < first_day)
   		AND (subscription_end >first_day
        	OR subscription_end IS NULL
        	) 
   		AND (segment = 87)THEN 1
   		ELSE 0
   		END as is_active_87,
  	CASE
  		WHEN (subscription_start < first_day)
   		AND (subscription_end >first_day
        	OR subscription_end IS NULL
        	) 
   		AND (segment = 30)THEN 1
   		ELSE 0
		END as is_active_30,
	CASE
    		WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment = 87) THEN 1
    		ELSE 0
    		END AS is_canceled_87,
	CASE
    		WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment = 30) THEN 1
    		ELSE 0
    		END AS is_canceled_30
	FROM cross_join
   	),
status_aggregate AS (
	SELECT month,
  	SUM(is_active_87) AS sum_active_87,
  	SUM(is_active_30) AS sum_active_30, 
	SUM(is_canceled_87) AS sum_canceled_87,
  	SUM(is_canceled_30) AS sum_canceled_30
  	FROM status 
  	GROUP BY month
	) 
SELECT month, 
	1.0 * sum_canceled_87/sum_active_87 AS churn_rate_87,
	1.0 * sum_canceled_30/sum_active_30 AS churn_rate_30
FROM status_aggregate;



-- Churn rate by segment without segment hardcoded

WITH months AS 
	(SELECT 
   	'2017-01-01' AS first_day,
  	'2017-01-31' AS last_day
	UNION
	SELECT
  	'2017-02-01' AS first_day,
  	'2017-02-28' AS last_day
	UNION
	SELECT
  	'2017-03-01' AS first_day,
  	'2017-03-31' AS last_day
  	),
cross_join AS
	(SELECT *
  	FROM subscriptions
  	CROSS JOIN months
  	),
status AS
	(SELECT id,
  	first_day AS month,
  	segment,
  	CASE
  		WHEN (subscription_start < first_day)
   		AND (subscription_end >first_day
        	OR subscription_end IS NULL
        	) THEN 1
   		ELSE 0
   		END as is_active,
  	CASE
    		WHEN (subscription_end BETWEEN first_day AND last_day) THEN 1
    		ELSE 0
    		END AS is_canceled
	FROM cross_join
   	),
status_aggregate AS (
	SELECT month,
  	segment,
  	SUM(is_active) AS sum_active, 
    	SUM(is_canceled) AS sum_canceled
  	FROM status 
  	GROUP BY month, segment
	) 
SELECT month,
	segment,
	1.0 * sum_canceled/sum_active AS churn_rate
FROM status_aggregate
ORDER BY segment ASC;

